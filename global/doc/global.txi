\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename global.info
@settitle GNU GLOBAL source code tag system
@comment %**end of header

@include version.texi

@c Define new index for options.
@defcodeindex op
@syncodeindex op cp

@ifinfo
@dircategory Development
@direntry
* GLOBAL: (global).             GNU GLOBAL source code tag system.
@end direntry
@end ifinfo

@ifinfo
This file documents the GNU GLOBAL source code tag system.

Copyright (c) 2000, 2001, 2002, 2003, 2004 Tama Communications Corporation

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts,
and with no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU
Free Documentation License".
@end ifinfo

@titlepage
@title GNU GLOBAL Source Code Tag System
@subtitle Edition @value{EDITION}, for GNU GLOBAL version @value{VERSION}
@subtitle @value{UPDATED}
@author by Shigio Yamaguchi
@c copyright page
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001, 2002, 2003, 2004 Tama Communications Corporation
@sp 2
This is the first edition of the GNU GLOBAL documentation,@*
and is consistent with @value{VERSION}.@*
@sp 2
Published by Tama Communications Corporation @*
Tama-shi, Tokyo, Japan.@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts,
and with no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU
Free Documentation License".

@end titlepage

@ifinfo
@node Top
@top GNU GLOBAL source code tag system

This manual documents version @value{VERSION} of the GNU GLOBAL source code tag system.

@menu
* Introduction::                        Overview of the tools.
* Global::                              Command line GLOBAL.
* Applications::			Various applications.
* Other topics::                        Other topics.
* Reference::				Reference manual.
* GNU Free Documentation License::	GNU Free Documentation License.
* Index::                               Option index.
@end menu
@end ifinfo

@c ***************************************************************************
@c Introduction
@c ***************************************************************************
@node Introduction
@chapter Overview of the tools

@section What is this?

GNU GLOBAL is a source code tag system that works the same way
across diverse environments.
You can locate a specified object in the source files and move there easily.
It is useful for hacking a large project containing many subdirectories,
many @code{#ifdef} and many @code{main()} functions.

It is similar to ctags or etags but is different from them at the point of
independence of any editor.

@section Concept of project.

GNU GLOBAL can treat a source tree containing subdirectories as a project.
It is similar to CVS.
You can get the relative path of your object from anywhere in the source tree.

You need not specify where the tag file is.
Instead, global(1) will locate the tag file by itself.
If tag file isn't found in the current directory, global(1) search parent
directories for tag file. 

User's position (current directory) is the first argument for GLOBAL's command.

@section Features.

GNU GLOBAL has following features:

@itemize @bullet
@item support C, C++, Yacc, Java, PHP and assembly.
@item work the same way across diverse environments. Currently, support followings:
	@itemize @minus
	@item Shell command line
	@item Bash shell.
	@item Vi editor clone (nvi, elvis, vim)
	@item Less viewer
	@item Emacs editor (emacs, mule, xemacs)
	@item Glimmer editor
	@item Web browser
	@end itemize
@item find the locations of a specified object quickly.
@item locate not only object definitions but also object references.
@item allows duplicate objects.
@item locate also path which includes specified pattern.
@item search not only in a source tree but also in library paths.
@item understand POSIX 1003.2 regular expressions.
@item support external search engine (grep and id-utils).
@item generate hypertext of source code.
@item tag files are independent of machine architecture.
@item plugged-in parser is available to treat new language.
@item compact format is available to save disk space.
@item support incremental updating of tag files.
@item support customizing with gtags.conf.
@item generate completion list for completing input method.
@item Postgres database system is available as a tag store.
@end itemize

@c ***************************************************************************
@c Global
@c ***************************************************************************
@node Global
@chapter Command line GLOBAL

You can use tag facilities from shell command line.
It is a big merit of GLOBAL compared with any other tag system.

@menu
* Preparation::                         Preparation.
* Basic usage::                         Basic usage.
* Applied usage::                       Applied usage.
@end menu

@c ***************************************************************************
@node   Preparation
@section Preparation.

First of all, you must execute gtags(1)(See @xref{gtags}.) at the root of source tree.
For example, if you want to browse vi's source code:

@example

    % cd /usr/src/usr.bin/vi
    % gtags

@end example

Gtags traverse subdirectories and makes four databases at the root of
the source tree.

@example

    % ls G*
    GPATH   GRTAGS  GSYMS   GTAGS

@end example

@itemize @bullet
@item @file{GTAGS}
        database of object definitions
@item @file{GRTAGS}
        database of object references
@item @file{GSYMS}
        database of other symbols
@item @file{GPATH}
        database of path names
@end itemize

@page
@c ***************************************************************************
@node   Basic usage
@section Basic usage.

Consider the following source tree:

@example

    ROOT/           <- @r{the root of source tree (GTAGS,GRTAGS,...)}
    |
    |- DIR1/
    |  |
    |  |- fileA.c   .....   +---------------+
    |  |                    |main()@{        |
    |  |                    |       func1();|
    |  |                    |       func2();|
    |  |                    |@}              |
    |  |                    +---------------+
    |  |
    |  |- fileB.c   .....   +---------------+
    |                       |func1()@{ ... @} |
    |                       +---------------+
    |- DIR2/
       |
       |- fileC.c   .....   +---------------+
                            |#ifdef X       |
                            |func2()@{ i++; @}|
                            |#else          |
                            |func2()@{ i--; @}|
                            |#endif         |
                            |func3()@{       |
                            |       func1();|
                            |@}              |
                            +---------------+

@end example

@itemize @bullet
@item You can get the relative path of your object from anywhere in
the source tree. You need not specify where the tag file is.
Global will locate the tag file by itself.

@example

    % cd ROOT
    % global func1
    DIR1/fileB.c            # @r{func1() is defined in fileB.c}
    % cd DIR1
    % global func1
    fileB.c                 # @r{relative path from DIR1}
    % cd ../DIR2
    % global func1
    ../DIR1/fileB.c         # @r{relative path from DIR2}

@end example

@item The @samp{-r} option locates object references.
@opindex -r

@example

    % global -r func2
    ../DIR1/fileA.c         # @r{func2() is referred from fileA.c}

@end example

@item You can use POSIX regular expressions.

@example

    % cd ROOT
    % global 'func[1-3]'
    DIR1/fileB.c            # @r{func1, func2 and func3 are matched}
    DIR2/fileC.c

@end example

@item The @samp{-x} option shows the details.
It is similar to the @samp{-x} option in ctags(1).
@opindex -x

@example

    % global func2
    DIR2/fileC.c
    % global -x func2
    func2              2 DIR2/fileC.c       func2()@{ i++; @}
    func2              4 DIR2/fileC.c       func2()@{ i--; @}

@end example

@item The @samp{-a} option produces the absolute path name.
@opindex -a

@example

    % global -a func1
    /home/user/ROOT/DIR1/fileB.c

@end example

@item The -s command locates any symbols which are not defined in @file{GTAGS}.
@opindex -s

@example

    % global -xs X
    X                  1 DIR2/fileC.c #ifdef X

@end example

@item The -g command locates any patterns including symbols.
It is similar to grep(1).
@opindex -g

@example

    % global -xg '#ifdef'
    #ifdef             1 DIR2/fileC.c #ifdef X

@end example

@item The -P command enables you to locate path which includes specified
string.
@opindex -P

@example

    % global -P fileB
    DIR1/fileB.c
    % global -P '1/'
    DIR1/fileA.c
    DIR1/fileB.c
    % global -P '\.c$'
    DIR1/fileA.c
    DIR1/fileB.c
    DIR2/fileC.c

@end example

@item The -f command enables you see the list of objects of specified file.
@opindex -f

@example

    % global -f DIR2/fileC.c
    func2              2 DIR2/fileC.c   func2()@{ i++; @}
    func2              4 DIR2/fileC.c   func2()@{ i--; @}
    func3              6 DIR2/fileC.c   func3()@{

@end example

@end itemize

@page
@c ***************************************************************************
@node   Applied usage
@section Applied usage.

You can make multiple tag files.
For example, you can execute gtags at ROOT/, version1.0/ and version2.0/.

@example


    ROOT/                   <- @r{the root of source tree      (GTAGS,...)}
    |
    |- version1.0/          <- @r{the root of version1.0       (GTAGS,...)}
    |  |
    |  |- file.c    .....   +---------------+
    |                       |func1()@{ i++; @}|
    |                       +---------------+
    |
    |- version2.0/          <- @r{the root of version2.0       (GTAGS,...)}
       |
       |- file.c    .....   +---------------+
                            |func1()@{ i--; @}|
                            +---------------+

@end example

@itemize @bullet
@item When you are in the version1.0 directory, global will only locate objects
that are in version1.0.

@example

    % cd ROOT/version1.0
    % global -x func1
    func1              1 file.c          func1()@{ i++; @}

@end example

@item When you are in the version2.0, global will only locate objects that
are in version2.0.

@example

    % cd ROOT/version2.0
    % global -x func1
    func1              1 file.c          func1()@{ i--; @}

@end example

@item If you are at ROOT/, or you set the @code{GTAGSROOT} environment variable to ROOT,
then global will locate objects in both directories.

@example

    % cd ROOT
    % global -x func1
    func1              1 version1.0/file.c  func1()@{ i++; @}
    func1              1 version2.0/file.c  func1()@{ i--; @}

@end example

@end itemize

There is another usage of @code{GTAGSROOT}.

@itemize @bullet

@item If your source files are on a read-only device, such as CDROM,
then you cannot make databases at the root of the source tree.
In such cases, please do the following:

@example

    % mkdir /var/dbpath
    % cd /cdrom/src                 # @r{the root of source tree}
    % gtags /var/dbpath             # @r{make tag file in /var/dbpath}
    % setenv GTAGSROOT `pwd`
    % setenv GTAGSDBPATH /var/dbpath
    % global func

@end example

@item If you want all references to an object that is not defined in the source
tree to be treated as calls to library functions or system calls, then
you can specify library directories with the @code{GTAGSLIBPATH} environment
variable.

You should execute gtags at each directory of the path.
If @file{GTAGS} is not found in a directory, global ignores that directory.

@example

    % pwd
    /develop/src/mh                         # @r{this is the source tree}
    % gtags
    % ls G*TAGS
    GRTAGS  GTAGS
    % global mhl
    uip/mhlsbr.c                            # @r{mhl() is found}
    % global strlen                         # @r{strlen() is not found}
    % (cd /usr/src/lib; gtags)              # @r{library source}
    % (cd /usr/src/sys; gtags)              # @r{kernel source}
    % setenv GTAGSLIBPATH /usr/src/lib:/usr/src/sys
    % global strlen
    ../../../usr/src/lib/libc/string/strlen.c  # @r{found in library}
    % global access
    ../../../usr/src/sys/kern/vfs_syscalls.c   # @r{found in kernel}

@end example

Of course, the user program does not call kernel functions directly,
but at least it is useful.


@item If you forget a object name, you can use the -c (complete) command.
@opindex -c

@example

    % global -c kmem                # @r{maybe k..k.. kmem..}
    kmem_alloc
    kmem_alloc_pageable
    kmem_alloc_wait
    kmem_free
    kmem_free_wakeup
    kmem_init
    kmem_malloc
    kmem_suballoc                   # @r{This is what I need!}
    % global kmem_suballoc
    ../vm/vm_kern.c

@end example

@item You can use the -c command with tcsh's complete command.

@example

    % set funcs=(`global -c`)
    % complete global 'n/*/$funcs/'
    % global kmem_@kbd{TAB}
    kmem_alloc          kmem_free_wakeup
    kmem_alloc_pageable kmem_init
    kmem_alloc_wait     kmem_malloc
    kmem_free           kmem_suballoc
    % global kmem_s@kbd{TAB}
    % global kmem_suballoc
    ../vm/vm_kern.c

@end example

@item You can edit all files that include a specified object by typing
one command, for example:

@example

    % vi `global func1`     # @r{edit fileB.c}

@end example

@item If you want to browse many files in order, do the following:

@example

    % global -xr fork | awk '@{printf "view +%s %s\n",$2,$3@}'
    view +650 ../dev/aic7xxx/aic7xxx_asm.c
    view +250 ibcs2/ibcs2_misc.c
    view +401 linux/linux_misc.c
    view +310 ../kern/init_main.c
    view +318 ../kern/init_main.c
    view +336 ../kern/init_main.c
    view +351 ../kern/init_main.c
    % !! | sh            # @r{from now on, go to next tag with 'ZZ'.}

@end example

@end itemize

@c ***************************************************************************
@c Applications
@c ***************************************************************************
@node Applications
@chapter Various applications

@menu
* GloBash::                             Global facility for Bash.
* Less viewer::                         Less using GLOBAL.
* Nvi-1.79 editor::                     Extended nvi-1.79 using GLOBAL.
* Nvi-1.81.5 editor::                   nvi-1.81.5 using GLOBAL.
* Elvis editor::                        Elvis using GLOBAL.
* Vim editor::                          Vim using GLOBAL.
* Emacs editor::                        Extended emacs using GLOBAL.
* Web browser::                         Hypertext generator.
@end menu

@c ***************************************************************************
@c GloBash
@c ***************************************************************************
@node GloBash
@section Global facility for Bash

Special support for bash is available.

@menu
* Features(globash)::			Features.
* Preparation(globash)::		Preparation.
* Basic usage(globash)::		Basic usage.
* Applied usage(globash)::		Applied usage.
@end menu

@c ***************************************************************************
@node   Features(globash)
@subsection Features.

@itemize @bullet
@item
Vi-like tag stack is available.
@item
Emacs-like tag name completion is available.
@item
Editor or viewer is automatically invoked.
@item
Tag mark facility is available.
@item
Yor can manage directory list by cookie facility.
@end itemize

@c ***************************************************************************
@node   Preparation(globash)
@subsection Preparation.

First, do the preparation of global. (Please see @xref{Preparation}.).
And you can invoke bash(1) with ---rcfile option.
@example

    % bash --rcfile globash.rc

@end example

You will see a prompt like this:
@example

    [/usr/src/sys]/kern _

@end example

This prompt means that the current directory is '/usr/src/sys/kern' and
the root of the source tree is '/usr/src/sys'.
Tag and marker are valid only in a project.

When you get out of the project, globash warns like:
@example

    [/usr/src/sys] cd ..
    You are going to get out of current project.
    Tag stack and marker will be removed. Sure? ([y]/n)_

@end example

If you answer 'y' and @kbd{RET}
or just @kbd{RET} in above example then tag stack and marker will be removed.

If you need help then please type 'ghelp'.

@c ***************************************************************************
@node   Basic usage(globash)
@subsection Basic usage.

@itemize @bullet
@item Almost global(1)(See @xref{global}.)'s command character is available as a command.
@example

    [/usr/src/sys] x fork               <- @r{(global -x fork)}
    >    1  fork              94 kern/kern_fork.c fork(p, uap)
    [/usr/src/sys] r                    <- @r{(global -xr fork)}
    >    1  fork              85 alpha/linux/linux_machdep.c
         2  fork             184 i386/linux/linux_machdep.c
    [/usr/src/sys] s lbolt              <- @r{(global -xs lbolt)}
    >    1  lbolt            1210 i386/isa/wd_cd.c     tsleep((cad
         2  lbolt            1211 i386/isa/wd_cd.c     tsleep((cad
         3  lbolt            709 i386/isa/wfd.c     tsleep ((caddr
    ...
    [/usr/src/sys] g                    <- @r{(global -xg lbolt)}
    >    1  lbolt            1210 i386/isa/wd_cd.c     tsleep((cad
    ...
    [/usr/src/sys] P init               <- @r{(global -xP init)}
    >    1  path    1 dev/hea/eni_init.c 
         2  path    1 dev/hfa/fore_init.c 
         3  path    1 i386/i386/initcpu.c 
         4  path    1 kern/init_main.c 
         5  path    1 kern/init_sysent.c 
         6  path    1 kern/vfs_init.c 
         7  path    1 vm/vm_init.c 
    [/usr/src/sys] _

@end example

If no tag name is specified then it is assumed the latest tag name.

@item You can select a tag by show command.
@example

    [/usr/src/sys] x main
    >    1  main              70 alpha/alpha/gensetdefs.c main(in
         2  main             1500 alpha/alpha/ieee_float.c main(i
         3  main             227 boot/alpha/boot1/boot1.c main()
    ....
    [/usr/src/sys] show 3
    (Load editor and show boot/alpha/boot1/boot1.c at line 227.)

@end example

The default editor is vi(1) but you can specify it statically by @code{EDITOR}
environment variable or temporarily by option.

@example

    [/usr/src/sys] show -e 3
    (Preloaded emacs show boot/alpha/boot1/boot1.c at line 227.)
    [/usr/src/sys] show -l 3
    (Load less and show boot/alpha/boot1/boot1.c at line 227.)
    [/usr/src/sys] show -g 3
    (Preloaded mozilla show boot/alpha/boot1/boot1.c at line 227.)

@end example

@item You can use vi-like tag stack. You can return previous tag list by
pop or @kbd{CTL-T} command.
@example

    [/usr/src/sys] x main
    >    1  main              70 alpha/alpha/gensetdefs.c main(in
         2  main             1500 alpha/alpha/ieee_float.c main(i
         3  main             227 boot/alpha/boot1/boot1.c main()
    ....
    [/usr/src/sys] show 3
    (Load editor and show boot/alpha/boot1/boot1.c at line 227.)
    [/usr/src/sys] x fork          <- @r{push new tag on tag stack.}
    >    1  fork              94 kern/kern_fork.c fork(p, uap)
    [/usr/src/sys] pop             <- @r{pop tag stack.}
    [/usr/src/sys] show
    (Load editor and show boot/alpha/boot1/boot1.c at line 227.)

@end example

@end itemize
@c ***************************************************************************
@node   Applied usage(globash)
@subsection Applied usage.

@itemize @bullet
@item You can memory tags using 'mark' command.
@example

    [/usr/src/sys] x fork
    >    1  fork              94 kern/kern_fork.c fork(p, uap)
    [/usr/src/sys] mark
    [/usr/src/sys] x main
    >    1  main              70 alpha/alpha/gensetdefs.c main(in
         2  main             1500 alpha/alpha/ieee_float.c main(i
         3  main             227 boot/alpha/boot1/boot1.c main()
    ....
    [/usr/src/sys] mark -l              <- @r{show marker list.}
         1  fork              94 kern/kern_fork.c fork(p, uap)
    [/usr/src/sys] mark 1               <- @r{select a marker.}
    (Load editor and show kern/kern_fork.c at line 227.)
    [/usr/src/sys] list
    >    1  main              70 alpha/alpha/gensetdefs.c main(in
         2  main             1500 alpha/alpha/ieee_float.c main(i
         3  main             227 boot/alpha/boot1/boot1.c main()
    ....
@end example

Marked tags are valid until you get out of current project or quit
current bash session.

@item You can memory directories using 'cookie' command.
@example

    [/usr/src/sys] cookie               <- @r{drop cookie.}
    [/usr/src/sys] cd kern
    [/usr/src/sys]/kern cookie          <- @r{drop cookie again.}
    [/usr/src/sys]/kern cd ../i386
    [/usr/src/sys]/i386 cookie -l       <- @r{show cookie list.}
         1  /usr/src/sys/kern
         2  /usr/src/sys
    [/usr/src/sys]/i386 warp 2          <- @r{warp to selected cookie.}
    [/usr/src/sys] _

@end example

Cookie directories are valid until you delete them.

@end itemize

@c ***************************************************************************
@c Less viewer
@c ***************************************************************************
@node Less viewer
@section Less using GLOBAL.

You can use GLOBAL as a tag system of less instead of ctags.

@menu
* Features(less)::                       Features.
* Preparation(less)::                    Preparation.
* Basic usage(less)::                    Basic usage.
* Applied usage(less)::                  Applied usage.
@end menu

@c ***************************************************************************
@node   Features(less)
@subsection Features.

@itemize @bullet
@item
You can use most of GLOBAL's facilities from less-370 or the later.
@item
Less viewer support duplicated tag.
@end itemize

@c ***************************************************************************
@node   Preparation(less)
@subsection Preparation.

First, do the preparation of global. (Please see @xref{Preparation}.).

Second, to use global from less, you need to set environment variable
@code{LESSGLOBALTAGS} to "global".

@example

    % setenv LESSGLOBALTAGS global

@end example

@c ***************************************************************************
@node   Basic usage(less)
@subsection Basic usage.

@itemize @bullet
@item To go to func1, you can say
@example

    % less -t func1

@end example

Please note that if @file{tags} exist then less use it.
If you want to use @file{GTAGS} even if @file{tags} exist
then please specify tag file explicitly like this.

@example

    % less -TGTAGS -t func1

@end example

@item To go to the referenced point of func1, please specify @file{GRTAGS}.
@example

    % less -TGRTAGS -t func1

@end example

In the same way, you can use @file{GTAGS}, @file{GRTAGS}, @file{GSYMS},
@file{GPATH} as tag file.

@item If a number of objects are located, less goes to the first tag.
You can go to next tag by typing @kbd{t} and back by typing @kbd{T}.

@table @code
@item @kbd{t}
go to next tag.
@item @kbd{T}
go to previous tag.
@end table

@item
From less session, you can use @kbd{:t} command to locate new symbol.
But in this case, you cannot change tag file from one specified by
@kbd{-T} option.

@end itemize

@c ***************************************************************************
@node   Applied usage(less)
@subsection Applied usage.

@itemize @bullet
@item With @kbd{-T-} option, less read standard input as tag file.
It is very valuable. You can connect global and less with pipe line.
@example

    % global -x func | less -T-

@end example

In the same way, you can use following command lines.

@example
    # pattern match with grep(1).
    % global -xg 'lseek(.*)' | less -T-

    # pattern match with id-utils(1).
    % global -xI func | less -T-

    # all objects definitions in *.c.
    % global -f *.c | less -T-

    # all files includes 'init' in its path.
    % global -Px init | less -T-
@end example

@item If your editor doesn't support GLOBAL directly then you can use less
as a footstool.

@example
    # invoke less
    % less -t main
    main(int argc, char **argv)
    @{
    int i;
    .....
    [xxx/main.c (tag 1 of 55)]

    # type 'v'(vi) command in less session.
    v

    # load vi and show the same position.
    .....
    main((int argc, char **argv)
    @{
    int i;
    .....
    [xxx/main.c 313 lines, 7783 char]

    # type 'ZZ' command in vi session.
    ZZ

    # exit vi and back to less session.
    main(int argc, char **argv)
    @{
    int i;
    .....
    [xxx/main.c (tag 1 of 55)]
@end example

@end itemize

@c ***************************************************************************
@c Nvi editor
@c ***************************************************************************
@node Nvi-1.79 editor
@section Extended nvi-1.79 using GLOBAL.

You can use GLOBAL as a tag system of Nvi editor instead of ctags.

@menu
* Features(nvi-1.79)::			Features.
* Preparation(nvi-1.79)::               Preparation.
* Basic usage(nvi-1.79)::               Basic usage.
* Applied usage(nvi-1.79)::             Applied usage.
@end menu

@c ***************************************************************************
@node   Features(nvi-1.79)
@subsection Features.

@itemize @bullet
@item
You can use most of GLOBAL's facilities from the editor.
@item
Recognition of the current token and its type.
@item
Extended nvi is completely backward-compatible with the original nvi.
You can use GLOBAL's facilities only in 'gtags mode'.
@end itemize

@c ***************************************************************************
@node   Preparation(nvi-1.79)
@subsection Preparation.

First, do the preparation of global. (Please see @xref{Preparation}.).

Second, to use global from nvi, you need to get into @dfn{gtagsmode}.
There are several ways to do this:

@enumerate
@item
Start nvi with @samp{-G} option

@example

    % nvi -G file.c

@end example

@item
Start nvi and execute @code{set gtagsmode}.

@example

    % nvi file.c
    ~
    ~
    ~
    :set gtagsmode

@end example

@item
Write the above set command to the @file{.exrc} or @file{.nexrc} and start nvi

@example

    $HOME/.exrc
    +----------------------------
    |set gtagsmode

@end example

You must start nvi under the source tree described in @xref{Preparation}.
@end enumerate

@c ***************************************************************************
@node   Basic usage(nvi-1.79)
@subsection Basic usage.

@itemize @bullet
@item To go to func1, you can say
@example

    :tag func1

@end example

It seemes the same as original nvi, but extended nvi use @file{GTAGS}
instead of @file{tags}.

@item To go to the referenced point of func1, add the option @kbd{-r}
@example

    :tag -r func1

@end example

Extended nvi use @file{GRTAGS}.

@item If a number of objects are located, extended nvi goes to the first tag.
You can go to next tag by typing @kbd{:tagnext} and back by typing @kbd{:tagprev}.

@example

    Suggested .nexrc:
    set gtagsmode
    map ^N :tagnext^M
    map ^P :tagprev^M

@end example

@item @kbd{CTL-]} command is available.
In gtags mode, if current token is not a function then it is equivalent to
@kbd{:tag -s @var{current token}}.
Otherwise, if you are in the first column of a line,
it is equivalent to @kbd{:tag -r @var{current token}} else it is equivalent
to @kbd{:tag @var{current token}}.

@item You can use the @kbd{-s} option. It locates any symbols which are not
defined in @file{GTAGS}.
@example

    :tag -s pat

@end example
Extended nvi use @file{GSYMS}.

@item The @kbd{-g}, @kbd{-f} and @kbd{-P} option are also available.
It works like command line. Extended nvi use no index file.
@example

    :tag -g pat

@end example
@item Other tag commands are also available:
@table @code
@item @kbd{CTL-T}
Return to the most recent tag context.
@item @kbd{:tagpop}
Go to the specified tag in the tags stack.
@item @kbd{:tagtop}
Go to the top tag in the tags stack.
@item @kbd{:display tags}
Display the tags stack.
@end table
@end itemize


@c ***************************************************************************
@node   Applied usage(nvi-1.79)
@subsection Applied usage.

@itemize @bullet
@item In large projects that include many main() function like MH, you can start nvi like this:
@example

    % nvi -G -t main

@end example
You can browse all commands sequentially.

@item When you want to check objects the name of which start with "set" or "get", use:
@example

    % nvi -G -t '^[sg]et'

@end example

Of course, the following command is also available:
@example

    :tag ^[sg]et

@end example

@item If your source files are on a read only device like a CD-ROM, please do
the following:
@example

    % mkdir /var/dbpath             # @r{directory for the tag file}
    % cd /cdrom/src                 # @r{the root of the source tree}
    % gtags /var/dbpath             # @r{make tag files in /var/dbpath}
    % setenv GTAGSROOT `pwd`
    % setenv GTAGSDBPATH /var/dbpath
    % nvi -G -t main

@end example

@item If you want all references to an object that is not defined in the source
        tree to be treated as references to library functions or as system calls,
        do the following:
@example

    % cd /usr/src/lib
    % gtags                         # @r{probably as a root}
    % cd /usr/src/sys
    % gtags
    % setenv GTAGSLIBPATH /usr/src/lib:/usr/src/sys

@end example
@item If you examine vi's source,
@example

    % cd /usr/src/usr.bin/vi
    % gtags
    % nvi -G -t main

@end example

You can start from nvi and browse the whole unix world as if you were
using hypertext.
@end itemize

@c ***************************************************************************
@c Nvi-1.81.5 editor
@c ***************************************************************************
@node Nvi-1.81.5 editor
@section nvi-1.81.5 using GLOBAL.

You can use GLOBAL as a tag system of Nvi editor instead of ctags.

@menu
* Features(nvi-1.81.5)::		Features.
* Preparation(nvi-1.81.5)::             Preparation.
* Basic usage(nvi-1.81.5)::             Basic usage.
@end menu

@c ***************************************************************************
@node   Features(nvi-1.81.5)
@subsection Features.

@itemize @bullet
@item
You can use most of GLOBAL's facilities from the editor.
@item
Recognition of the current token and its type.
@end itemize

@c ***************************************************************************
@node   Preparation(nvi-1.81.5)
@subsection Preparation.

First, do the preparation of global. (Please see @xref{Preparation}.).

Second, to use global from nvi, you need write to @file{.nexrc} like this:
It assumed that gtags.pl is put on @file{$HOME/perl}.

@example

    $HOME/.nexrc
    +----------------------------
    |perl use lib "$ENV@{'HOME'@}/perl"
    |perl require 'gtags.pl'
    |map ^P :tagprev^M
    |map ^N :tagnext^M
    |map ^] :perl tag^M
    |ab gtag perl tag qw(
    |ab gta perl tag qw(
    |ab gt perl tag qw(

@end example

You must start nvi under the source tree described in @xref{Preparation}.

@c ***************************************************************************
@node   Basic usage(nvi-1.81.5)
@subsection Basic usage.

@itemize @bullet
@item To go to func1, you can say
@example

    :perl tag qw(func1)

@end example
@example
    Suggested .nexrc:
    ab gtag perl tag qw(
    ab gta perl tag qw(
    ab gt perl tag qw(
@end example

@item To go to the referenced point of func1, add the option @kbd{-r}
@example

    :perl tag qw(-r func1)

@end example

@item If a number of objects are located, nvi goes to the first tag.
You can go to next tag by typing @kbd{:tagnext} and back by typing @kbd{:tagprev}.

@example
    Suggested .nexrc:
    map ^N :tagnext^M
    map ^P :tagprev^M
@end example

@item If you don't specify any argument. ':perl tag' command do the followins:
If current token is not a function then it is equivalent to
@kbd{:perl tag qw(-s @var{current token})}.
Otherwise, if you are in the first column of a line,
it is equivalent to @kbd{:perl tag qw(-r @var{current token})} else it is equivalent
to @kbd{:perl tag qw(@var{current token})}.

@example

    Suggested .nexrc:
    map ^] :perl tag^M

@end example

It is similar to @kbd{CTL-]} command.

@item You can use the @kbd{-s} option. It locates any symbols which are not
defined in @file{GTAGS}.
@example

    :perl tag qw(-s pat)

@end example

@item The @kbd{-g}, @kbd{-f} and @kbd{-P} option are also available.
It works like command line.
@example

    :perl tag qw(-g pat)

@end example

@item When you want to check objects the name of which start with "set" or "get", use:
@example

    :perl tag qw(^[sg]et)

@end example
@item Other tag commands are also available:
@table @code
@item @kbd{CTL-T}
Return to the most recent tag context.
@item @kbd{:tagpop}
Go to the specified tag in the tags stack.
@item @kbd{:tagtop}
Go to the top tag in the tags stack.
@item @kbd{:display tags}
Display the tags stack.
@end table
@end itemize

@c ***************************************************************************
@c Elvis editor
@c ***************************************************************************
@node Elvis editor
@section Elvis using global

Elvis 2.1 has new @code{tagprg} and @code{tagprgonce} variables for
running an external tag search program. You can use them with GLOBAL.

@menu
* Features(elvis)::                     Features.
* Preparation(elvis)::                  Preparation.
* Basic usage(elvis)::                  Basic usage.
* Applied usage(elvis)::                Applied usage.
@end menu

@c ***************************************************************************
@node   Features(elvis)
@subsection Features.

@itemize @bullet
@item
You can use most of GLOBAL's facilities from the editor.
@item
No source level patch is needed.
@item
Mouse events are supported.
@end itemize

@c ***************************************************************************
@node   Preparation(elvis)
@subsection Preparation.

First, do the preparation of global. (Please see @xref{Preparation}.).

Second, start elvis and execute @code{set tagprg="global -t $1"} like this.
@opindex -t

@example

    % elvis
    ~
    ~
    ~
    ~
    ~
    ~
    :set tagprg="global -t $1"

@end example

@c ***************************************************************************
@node   Basic usage(elvis)
@subsection Basic usage.

@itemize @bullet
@item To go to func1, you can say
@example

    :tag func1

@end example

It seemes the same as original elvis, but elvis execute @code{global -t func1}
internally and read it instead of tags file.

@item To go to the referenced point of func1, add @samp{-r} option.
@opindex -r
@example

    :tag -r func1

@end example

Elvis executes command like @code{global -t -r func1} internally.

@item To go to any symbols which are not defined in @file{GTAGS}, try this.
@opindex -s
@example

    :tag -s lbolt

@end example

@item To go to any strings other than symbols, try this.
@opindex -g
@example

    :tag -g Copyright

@end example

@item When using -r, -s or -g, you had better to use browse command.
@example

    :browse -r fork

@end example

It brings a following selection list. You can select tag and go to
the point.

@example

    Browse -r fork (2 matches)
    +----------------+----------------+--------------------
    | TAG NAME       | SOURCE FILE    | SOURCE LINE                   
    +----------------+----------------+--------------------
    |fork            |ux/linux_misc.c | (line 565)                    
    |fork            |ern/init_main.c | (line 191)                    
    +----------------+----------------+--------------------

@end example

@item To get list of objects in a file, use -f command.
@opindex -f
@example

    :browse -f main.c               <- @r{locate definitions in main.c}

@end example

@item Other tag commands are also available:

@table @code
@item @kbd{CTL-]}
        go to the definition of current token.
@item @kbd{CTL-T}
        return to the most recent tag context.
@item @kbd{:tag}
        without argument, go to the next tag.
@item @kbd{:pop}
        return to the most recent tag context.
@item @kbd{:stack}
        display the tags stack.
@item @kbd{:stag}
        creates a new window and moves its cursor to the tag's definition point.
@item @kbd{:sbrowse}
        same with 'browse' but show in a new window.
@end table
@end itemize

@c ***************************************************************************
@node   Applied usage(elvis)
@subsection Applied usage.

@itemize @bullet
@item You can use POSIX regular expressions.
@opindex -g
@example

    :tag ^put_                  <- @r{locate objects start with 'put_'}
    
    :browse -g 'fseek(.*L_SET)' <- @r{locate fseek() using L_SET argument}

@end example

@item You can browse object list of many files.
@opindex -f
@example

    :browse -f *.c              <- @r{locate objects in *.c}

@end example

@item You can browse project files whose path includs specified pattern.
@opindex -P
@example

    :browse -P /vm/             <- @r{under vm/ directory}
    :browse -P \.h$             <- @r{all include files}
    :browse -P init             <- @r{path including 'init'}

@end example

@item You can use mouse to select tag.
@example

    +----------------+----------------+--------------------
    | TAG NAME       | SOURCE FILE    | SOURCE LINE                   
    +----------------+----------------+--------------------
    |fork            |ux/linux_misc.c | (line 565)                    
    |fork            |ern/init_main.c | (line 191)                    
    +----------------+----------------+--------------------

@end example

Please select tag name with mouse cursor and double click on the left
button and you go to the tag's point.
In source screen, also select an object name and double click on the
left button and you can go to the point that the object is defined.
To come back, double click on the right button.
@end itemize

@c ***************************************************************************
@c Vim editor
@c ***************************************************************************
@node Vim editor
@section Vim using global

In vim 6.2 or later, you can use gtags.vim script.

@menu
* Features(vim)::                       Features.
* Preparation(vim)::                    Preparation.
* Basic usage(vim)::                    Basic usage.
* Applied usage(vim)::                  Applied usage.
@end menu

@c ***************************************************************************
@node   Features(vim)
@subsection Features.

@itemize @bullet
@item
You can use most of GLOBAL's facilities from the editor.
@item
Intelligent recognition of the current token and its type.
@item
Special charactor '%', '#' and input completion are available.
@end itemize

@c ***************************************************************************
@node   Preparation(vim)
@subsection Preparation.

First, do the preparation of global. (Please see @xref{Preparation}.).

Second, copy @file{gtags.vim} to your plugin directory or source it
from your vimrc.

@example

    % cp /usr/local/share/gtags/gtags.vim ~/.vim/plugin

@end example

@c ***************************************************************************
@node   Basic usage(vim)
@subsection Basic usage.

@itemize @bullet
@item To go to main, you can say
@example

    :Gtags main

@end example

Vim execute @code{global -t main}, parse the output, list located
objects in quickfix window and load the first entry.
The quickfix windows is like this:
@example

gctags/gctags.c|119| main
global/global.c|154| main
gozilla/gozilla.c|156| main
gtags/gtags.c|199| main
libglibc/getopt.c|701| main
libglibc/getopt1.c|93| main
[Error List]

@end example

You can go to any entry using quickfix command.

@table @code
@item @kbd{:cn}
        go to the next entry.
@item @kbd{:cp}
        go to the previous entry.
@item @kbd{:ccN}
        go to the N'th entry.
@item @kbd{:cl}
        list all entries.
@end table

You can see the help of quickfix like this:
@example

    :h quickfix

@end example

@item To go to the referenced point of func1, add @samp{-r} option.
@opindex -r
@example

    :Gtags -r func1

@end example

vim executes command like @code{global -t -r func1} internally.

@item To go to any symbols which are not defined in @file{GTAGS}, try this.
@opindex -s
@example

    :Gtags -s lbolt

@end example

@item To go to any strings other than symbols, try this.
@opindex -g
@example

    :Gtags -g Copyright

@end example


@item To get list of objects in a file, use -f command.
@opindex -f
@example

    :Gtags -f main.c               <- @r{locate objects in main.c}

@end example

If you are editing @file{main.c} itself, you can use '%' instead.
@example

    :Gtags -f %                    <- @r{locate objects in main.c}

@end example
@end itemize

@c ***************************************************************************
@node   Applied usage(vim)
@subsection Applied usage.

@itemize @bullet
@item You can use POSIX regular expressions.
@opindex -g
@example

    :Gtags ^put_                <- @r{locate objects start with 'put_'}
    
    :Gtags -g fseek(.*SEEK_SET) <- @r{locate fseek() using SEEK_SET}

@end example

@item Input completion is available.

    :Gtags fu@kbd{TAB}

    :Gtags func1               <- @r{'nc1' is appended by vim}

@item You can browse project files whose path includes specified pattern.
@opindex -P
@example

    :Gtags -P /vm/             <- @r{under vm/ directory}
    :Gtags -P \.h$             <- @r{all include files}
    :Gtags -P init             <- @r{path including 'init'}

@end example

@item You can use all options of global(1) except for the -c, -p, -u and
	all long name options. They are sent to global(1) as is.
	For example,

@example

    :Gtags -gi paTtern         <- @r{match to both 'PATTERN' and 'pattern'.}

@end example
	About the other options, See @xref{global}.

@item The GtagsCursor command brings you to the definition or reference of
	the current token in C language.
	The GtagsCursor is not perfect though is considerably wise.
	If current token is not a function then
	it is equivalent to @kbd{:Gtags -s @var{current token}}.
	Otherwise, if you are in the first column of a line,
	it is equivalent to @kbd{:Gtags -r @var{current token}}
	else it is equivalent to @kbd{:Gtags @var{current token}}.

@example

    :GtagsCursor

@end example

@example
    Suggested map:
    map <C-]> :GtagsCursor<CR>
@end example

@item If you have the hypertext generated by htags(1) then you can display
	the same place on mozilla browser. Let's load mozilla and try this:

@example

    :Gozilla

@end example

@example
    Suggested map:
    map <C-g> :Gozilla<CR>
@end example

@item If you want to load vim with all main()s then following command line is useful.

@example

    % vim '+Gtags main'

@end example
@end itemize

@c ***************************************************************************
@c Emacs editor
@c ***************************************************************************
@node Emacs editor
@section Extended emacs using global

You can use GLOBAL as a tag system of Emacs editor instead of etags.

@menu
* Features(emacs)::			Features.
* Preparation(emacs)::                  Preparation.
* Basic usage(emacs)::                  Basic usage.
* Applied usage(emacs)::                Applied usage.
@end menu

@c ***************************************************************************
@node   Features(emacs)
@subsection Features.

@itemize @bullet
@item
You can use most of GLOBAL's facilities from the editor.
@item
More intelligent recognition of the current token and its type.
@item
Tag completion is available for input tag name.
@item
Mouse events are supported.
@end itemize

@c ***************************************************************************
@node   Preparation(emacs)
@subsection Preparation.

First, do the preparation of global. (Please see @xref{Preparation}.).

Second, to use global from emacs, you need to load the @file{gtags.el}
and execute gtags-mode function in it.

@enumerate
@item Write the autoload function to the @file{$HOME/.emacs}, start emacs
       and execute the gtags-mode function. If you don't put @file{gtags.el}
       in standard macro directory, you need to add the directory to
       @code{load-path}.

@example

    $HOME/.emacs
    +------------------------------------------------------
    |(setq load-path (cons "/home/owner/global" load-path))
    |(autoload 'gtags-mode "gtags" "" t)
    
    % emacs
    
    |
    |J_:-----Mule: *scratch*       (Lisp Interaction)--L16--All----
    |M-x gtags-mode[RET]
    +------------------------------------------------------

@end example

If you want to get into gtags-mode on c-mode then you can append
followings into the @file{$HOME/.emacs}.
@example

      (setq c-mode-hook
          '(lambda ()
              (gtags-mode 1)
      ))

@end example
    
@item Specify the root directory of the source tree using
@code{gtags-visit-rootdir}.
If you have tag files in /usr/src/sys then please do like this:
@example

    Visit root directory: /usr/src/sys

@end example
@end enumerate


@c ***************************************************************************
@node   Basic usage(emacs)
@subsection Basic usage.

@itemize @bullet
@item To go to func1, invoke @code{gtags-find-tag}
and you can see a prompt in mini-buffer. Then input the tag name.
@example

    Find tag: func1			<- @r{'Find tag: ' is a prompt}

@end example
@item To go to a point that references func1, invoke @code{gtags-find-rtag}.

@example

    Find tag (reference): func1

@end example

@item Tag name completion is available.
     You need to execute @code{gtags-make-complete-list} command before it.
@example

    Find tag: fu@kbd{TAB}
    
    Find tag: func1                     <- @r{'nc1' is appended by emacs}

@end example

@item If a number of objects are located, emacs goes into @dfn{GTAGS SELECT MODE}
     like this:
@example

    +-------------------------------------------------------------
    |main             347 i386/isa/ultra14f.c main()
    |main             128 kern/init_main.c   main(framep)
    |main             104 netiso/clnp_debug.c main()
    |main             164 netiso/xebec/main.c main(argc, argv)
    |
    |
    |
    |
    |
    |J_:--%*-Mule: *scratch*       (Gtags Select)--L1--All----
    |[GTAGS SELECT MODE] 4 lines
    +-------------------------------------------------------------

@end example

You can select a tag line by using any emacs command and pressing @kbd{RET},
and you can go to the tag's point. When you want to go to the next or
the previous tag, you can return to 'GTAGS SELECT MODE' with @code{gtags-pop-stack}
and reselect.

@item @code{gtags-find-tag-from-here} command is available.

If current token is a definition, it is equivalent to
@kbd{Find tag (reference): @var{current token}RET},
otherwise it is equivalent to @kbd{Find tag: @var{current token}RET}.
(GLOBAL decides this intelligentlly, but may sometimes misunderstand.)

@item To go to any symbols which are not defined in @file{GTAGS}, try @code{gtags-find-symbol}.
@example

    Find symbol: lbolt		<- @r{'Find symbol:' is a prompt}

@end example
@item To go to any strings other than symbols, try @code{gtags-find-with-grep}.
@example

    Find pattern: Copyright

@end example
@end itemize

@c ***************************************************************************
@node   Applied usage(emacs)
@subsection Applied usage.

@itemize @bullet
@item You can use POSIX regular expressions.

@example

    Find tag: ^put_                 <- @r{locate tags start with 'put_'}

@end example

@item If your source files are on a read-only device like a CDROM, please do
     the following:
@example

    % mkdir /var/dbpath             # @r{directory for the tag file}
    % cd /cdrom/src                 # @r{the root of the source tree}
    % gtags /var/dbpath             # @r{make tag files in /var/dbpath}
    % setenv GTAGSROOT `pwd`
    % setenv GTAGSDBPATH /var/dbpath
    % emacs -f gtags-mode

@end example

@item If you want all references to an object that is not defined in the
     source tree to be treated as references to library functions or
     as system calls, do the following:
 
@example

    % cd /usr/src/lib
    % gtags                         <- @r{probably as a root}
    % cd /usr/src/sys
    % gtags
    % setenv GTAGSLIBPATH /usr/src/lib:/usr/src/sys
    % emacs -f gtags-mode

@end example

@item Mouse command is avalable.

If you use X version emacs, try the following

Move the mouse cursor to an object name and click the middle button.
You will then go to the object's definition, or to its references,
depending on the context. In 'GTAGS SELECT MODE', move the mouse cursor
to a line and click the center button.

To return to the previous position, click the right button.
@end itemize
@c ***************************************************************************
@c Web browser
@c ***************************************************************************
@node Web browser
@section Hypertext generator

You can use GLOBAL's facilities from WWW browser.

@menu
* Features(browser)::                   Features.
* Preparation(browser)::                Preparation.
* Usage(browser)::                      Usage.
@end menu

@c ***************************************************************************
@node   Features(browser)
@subsection Features.

@itemize @bullet
@item Htags makes hypertext from C, C++, Yacc and Java source files.
@item Once the hypertext is generated, you need nothing other than a WWW browser.
@item You can move the hypertext to anywhere. It is independent of the source code.
@item You can use all of your browser's functions, such as search,
     history, bookmark, save, frames, windows.
@end itemize

@c ***************************************************************************
@node   Preparation(browser)
@subsection Preparation.

At first, you must ensure that you have a lot of disk space. Hypertext
needs a great amount of disk space. For example, the source code
of FreeBSD kernel needs:

@example

    source code(/usr/src/sys)       14.0MB
    
    GTAGS                            1.5MB
    GRTAGS                           8.0MB
    GSYMS                           12.0MB
    HTML/                           55MB(!!!)
    -------------------------------------------------
    total                           77MB

@end example

Please invoke gtags(1)(See @xref{gtags}.) and htags(1)(See @xref{htags}.)
in order like this:

@example

    (at your source directory)
    % gtags                 # @r{make the tag database(GTAGS,GRTAGS,GSYMS)}
    % htags                 # @r{make the hypertext(HTML/)}

@end example

Then you will find an @file{HTML} subdirectory in the current directory.


@c ***************************************************************************
@node   Usage(browser)
@subsection Usage.

Please start a web browser like this:

@example

    % lynx HTML/index.html

@end example

You will understand the usage by looking at the examples.

You can move the HTML directory to anywhere. It is independent of the
source code.

Using mozilla, you can also utilize hypertext from your command line like this:
@example

    % mozilla				# @r{load mozilla}
    % global -x main
    main        10 main.c main(int argc, char *argv[]) @{
    % gozilla +10 main.c		# @r{usage is similar to vi editor.}
    (show main.c at 10 on mozilla's screen.)
    
@end example
But in this case, you must not move HTML directory from the source directory.

@c ***************************************************************************
@c Other topics
@c ***************************************************************************
@node Other topics
@chapter Other topics

@menu
* Configuration::                       How to config GLOBAL.
* Plugin::                              How to plug in a parser.
* Compact format::                      Compact format.
* Incremental updating::                Incremental updating.
* Postgres::                            Using Postgres.
@end menu

@c ***************************************************************************
@node   Configuration
@section How to config GLOBAL.

You can customize GLOBAL using configuration file.

@example

    # cp gtags.conf /etc/gtags.conf         # system wide configuration file.
    # vi /etc/gtags.conf

    % cp gtags.conf $HOME/.globalrc         # personal configuration file.
    % vi $HOME/.globalrc

@end example

If @file{$HOME/.globalrc} exists then GLOBAL use it. Else if @file{/etc/gtags.conf}
exists then GLOBAL use it. Otherwise default value will be used.
The format of @file{gtags.conf} is resemble to termcap(5). By default, 'default'
target is used.
About the capabilities, please see each command manual. (See @xref{Reference}.)

@c ***************************************************************************
@node   Plugin
@section How to plug in a parser.

You can write new parser and use as a plugged-in parser.

Copy @file{gtags.conf} to @file{/etc/gtags.conf} or @file{$HOME/.globalrc}.

For example, if you would like to use ctags based on etags (included
by Emacs),

@example

    % cd /@var{emacs source directory}/lib-src
    % make ctags
    # cp ctags /usr/local/bin/ctags-emacs
    % setenv GTAGSLABEL ctags-emacs         # @r{see gtags.conf}
    % gtags
    % ls G*
    GPATH   GTAGS

@end example

Or if you would like to use exuberant ctags (included by Vim editor),

@example

    % cd /@var{vim source directory}/src/ctags
    % cp Makefile.unix Makefile
    % make
    # cp ctags /usr/local/bin/ctags-exuberant
    % setenv GTAGSLABEL ctags-exuberant     # @r{see gtags.conf}
    % gtags
    % ls G*
    GPATH   GTAGS

@end example

@file{GRTAGS} and @file{GSYMS} don't exist, simply because
these parsers don't support the @samp{-r} option and @samp{-s} option like gctags(1) does.
@opindex -r
@opindex -s
All plugged-in parsers must print tag information to standard output
in the same style as @code{ctags -x}, ie.:

@example

    [1]    [2] [3]          [4]
    ----------------------------------------------------------------
    main    20 ./main.c     main(argc, argv)        /* xxx */
    
    [1] tag name
    [2] line number the tag appeared
    [3] path name. It must be equal to argument path name.
    [4] line image

@end example

Otherwise, you can make a suitable wrapper for the plug-in parser.

@page
@c ***************************************************************************
@node   Compact format
@section Compact format.

You can save disk space with the compact format.

@itemize @bullet
@item To specify the use of the compact format on the command line,
     add the @samp{-c} option:
@opindex -c
@example

    % gtags -c

@end example

@item To specify the use of the compact format in the configuration file:
@example

    +----------------------------
    |...
    |default:\
    |       format=compact:...

@end example

@item If you will publish hypertext generated by htags then use the @samp{-c} option
     of htags too:
@opindex -c
@example

    % htags -c

@end example

With the @samp{-c} option, htags makes gzipped hypertext.
You need to set up an HTTP server so that gzipped files can be read
(see @file{HTML/.htaccess}).

@example

    Example:
    
            Standard        Compact         Compressed rate
    -------------------------------------------------------
    GTAGS    1744896 bytes   720896 bytes   -59%
    GRTAGS  10133504 bytes  1409024 bytes   -86%
    GSYMS   11911168 bytes  9306112 bytes   -22%
    
            Standard        Compact         Compressed rate
    -------------------------------------------------------
    HTML/   56618 kbytes    15219 kbytes    -73%

@end example
@end itemize

@page
@c ***************************************************************************
@node   Incremental updating
@section Incremental updating.

Modifying some source files, you need not remake whole tag files.
Instead, you can use incremental updating facility (@samp{-u} option).
@opindex -u
@example

    % gtags
    % cd kern
    % vi tty.c                              # @r{modify tty.c}
    ...
    :wq
    % global -vu                            # @r{-v means verbose}
    [Sun Dec  6 16:27:47 JST 1998] Gtags started
     Tag found in '/usr/src/sys'.
     Incremental update.
     Updating tags of 'kern/tty.c' ...GTAGS..GRTAGS..GSYMS.. Done.
     Global databases have been modified.
    [Sun Dec  6 16:28:30 JST 1998] Done.
    % global -vu                            # @r{try again}
    [Sun Dec  6 16:28:48 JST 1998] Gtags started
     Tag found in '/usr/src/sys'.
     Incremental update.
     Global databases are up to date.       # @r{do nothing}
    [Sun Dec  6 16:28:52 JST 1998] Done.

@end example

@c ***************************************************************************
@node   Postgres
@section Using Postgres.

You can make tag files in postgres database instead of normal files.
To do this, you must setup postgres database system, configure GLOBAL
with @option{--with-postgres}, build it and make a database so that you can
access to it. You need a database for a project.
At the first time of creating tag files, you need specify info string with
@option{--info}. The info string is passed to PQconnectdb(3) as is.
@opindex -P
@example

    # setup postgres database system
    % set DBNAME=gtagsdb
    % createdb $DBNAME
    % gtags -P --info="dbname=$DBNAME user=`whoami`"

@end example

Once tag files are created, you need not use @option{--info}.
If info string is not specified then gtags load it from tag files.

Please be careful of the value of info string.
It is passed to Postgres system as is.
If you mistake the value then program may abort with core dump.

@c ***************************************************************************
@c Reference manual.
@c ***************************************************************************
@node Reference
@chapter Reference manual
@include reference.txi

@c ***************************************************************************
@c FDL
@c ***************************************************************************
@include fdl.txi

@node Index
@unnumbered Option Index
@printindex cp
@contents
@bye

#! @PERL@
#------------------------------------------------------------------
# YOU ARE COMING TO THE DESTINATION ALMOST. PLEASE DO A LITTLE EFFORT.
#
# How to setup search form of htags
# =================================
#
# You should start HTTP server so that this script is executed as a CGI script.
# Setup procedure for it depends on the HTTP server which you are using.
# If you are using Apache, 'HTML/.htaccess' might be helpful for you.
#
#------------------------------------------------------------------
#
# Copyright (c) 1997, 2004, 2006, 2008, 2010 Tama Communications Corporation
#
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Display an error message and exit.
#
$basedir = $ENV{'HTTP_REFERER'};
if (!$basedir) {
	print "Content-type: text/html\n\n";
	print "@page_begin@\n";
	print "@body_begin@\n";
        print "@error_begin@Error@error_end@\n";
        print "@message_begin@Your browser doesn't send HTTP_REFERER. Please use another one.@message_end@\n";
        print "@body_end@\n";
        print "@page_end@\n";
        exit 0;
}
$basedir =~ s!http://[^\/]+!!;		# remove http://host
$basedir =~ s!/[^\/]+$!!;		# remove file name.
$basedir =~ s!/defines$!!;
$basedir =~ s!/S$!!;
$basedir =~ s!/$!!;
print "Content-type: text/html\n\n";
print "@page_begin@\n";
print "@body_begin@\n";
sub error {
        local($msg) = @_;
        print "@error_begin@Error@error_end@\n";
        print "@message_begin@$msg <a href='$basedir/mains.@normal_suffix@'>[return]</a>@message_end@\n";
        print "@body_end@\n";
        print "@page_end@\n";
        exit 0;
}
if (! -x '@globalpath@') {
	error("Server side command not found.");
}
@pairs = split (/&/, $ENV{'QUERY_STRING'});
foreach $p (@pairs) {
	($name, $value) = split(/=/, $p);
	$value =~ tr/+/ /;
	$value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack("C", hex($1))/eg;
	$form{$name} = $value;
}
if ($form{'pattern'} eq '') {
	error("Pattern not specified.");
}
$pattern = $form{'pattern'};
$flag = '';
$words = 'definitions';
if ($form{'type'} eq 'reference') {
	$flag = 'r';
	$words = 'references';
} elsif ($form{'type'} eq 'symbol') {
	$flag = 's';
	$words = 'symbols';
} elsif ($form{'type'} eq 'path') {
	$flag = 'P';
	$words = 'paths';
} elsif ($form{'type'} eq 'grep') {
	$flag = 'g';
	$words = 'patterns';
} elsif ($form{'type'} eq 'idutils') {
	$flag = 'I';
	$words = 'patterns';
}
$iflag = '';
if ($form{'icase'}) {
	$iflag = 'i';
}
$oflag = '';
if ($form{'other'} && ($flag eq 'g' || $flag eq 'P')) {
	$oflag = 'o';
}
if ($form{'id'}) {
	chdir("$form{'id'}/cgi-bin");
	if ($?) {	
		error("Couldn't find tag directory in secure mode.");
	}
}
$html = (-s "../compress") ? 'ghtml' : 'html';
if (-f "../GTAGSROOT" && open(GTAGSROOT, "../GTAGSROOT")) {
	$gtagsroot = <GTAGSROOT>;
	chop($gtagsroot);
	close(GTAGSROOT);
} else {
	$gtagsroot = "../..";
}
chdir($gtagsroot);
if ($?) {
	error("GTAGSROOT directory not found.");
}
#
# Sanity check
# GTAGS and GPATH is indispensable file.
#
$missed = '';
if (! -f 'GTAGS') {
	$missed = 'GTAGS';
} elsif (! -f 'GPATH') {
	$missed = 'GPATH';
} elsif ($flag eq 'r' && ! -f 'GRTAGS') {
	$missed = 'GRTAGS';
} elsif ($flag eq 'I' && ! -f 'ID') {
	$missed = 'ID';
}
if ($missed) {
	error("Tag file ($missed) not found.");
}
#
# fork and exec global(1) to avoid command substitutions in $pattern.
# The --result=ctags-xid print the file id of the path at the head
# of each line.
#
$flags = $flag . $iflag . $oflag;
if ($flags eq '') {
	open(PIPE, "-|") || exec '@globalpath@', '--result=ctags-xid', '-e', $pattern;
} else {
	open(PIPE, "-|") || exec '@globalpath@', '--result=ctags-xid', '-'.$flags, '-e', $pattern;
}
if ($?) {	
	error("Cannot execute global.");
}
local(%ctab) = ('&', '&amp;', '<', '&lt;', '>', '&gt;');
$pattern =~ s/([&<>])/$ctab{$1}/ge;
print "@title_begin@" . $pattern . "@title_end@\n";
print "Following $words are matched to above pattern.@hr@\n";
$cnt = 0;
local($tag, $lno, $filename);
print "@verbatim_begin@\n";
#
# Input format:
#
# fid tag   lno filename
# ---------------------------------------------
# 100 main  32 ./main.c main(argc, argv)
#
while (<PIPE>) {
	chop;
	$cnt++;
	($fid, $tag, $lno, $filename) = split;
	s/^[0-9]+[ \t]+//;
	s/([&<>])/$ctab{$1}/ge;
	s!(^[^ \t]+)!<a href='$basedir/S/$fid.$html#L$lno'>$1<\/a>!;
	print "<span class='curline'>$_</span>\n";
}
close(PIPE);
print "@verbatim_end@\n";
if ($cnt == 0) {
	print "@message_begin@Pattern not found. <a href='$basedir/mains.@normal_suffix@'>[return]</a>@message_end@\n";
}
print "@hr@\n";
print "@body_end@\n";
print "@page_end@\n";
exit 0;
